#!/usr/bin/env node
    "use strict";
//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ REQUIRE NPM MODULE DEPENDENCIES.                                                  │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    const app   = require('../app');
    const debug = require('debug')('express:server');
    const http  = require('http');

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ REQUIRE MY-MODULES DEPENDENCIES.                                                  │
//  └───────────────────────────────────────────────────────────────────────────────────┘

//  ──[ SERVER. ]────────────────────────────────────────────────────────────────────────
    const ENVIRONMENT = process.env.NODE_ENV;
    const {
      SERVER:{
        PORT,
        HOSTNAME
      }
    } = require('../config');

//  ──[ LOGGERS. ]───────────────────────────────────────────────────────────────────────
    const {
      LOGGER_SERVER
    } = require('../services/service.logger');

    const {
      LOGGER_DEBUG
    } = require('../services/service.logger');

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ GET PORT FROM ENVIRONMENT AND STORE IN EXPRESS.                                   │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    const port = normalizePort( PORT || '3000');
    app.set('port', port);

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ CREATE HTTP SERVER.                                                               │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    const server = http.createServer(app);

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ STARTING THE SERVER.                                                              │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    server.listen(port , () => {
      console.log(`────────────────────────────────────────────────────`);
      console.log(`→ START THE SERVER ON PORT: '${port}'`); 
      console.log(`→ START APP IN ENVIRONMENT: ${ENVIRONMENT.toUpperCase()}`);
      console.log(`→ OPEN http://${HOSTNAME}:${port} IN YOUR BROWSER`);
      console.log(`→ VIEWS DIRECTORY: ${app.get('views')}` ); 
      console.log(`→ VIEW ENGINE: '${app.get('view engine').toUpperCase()}'`); 
      console.log(`────────────────────────────────────────────────────` );
    });

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ LISTEN ON PROVIDED PORT, ON ALL NETWORK INTERFACES.                               │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    server.on('error', onError);
    server.on('listening', onListening);
    server.on('close',onClose);

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ NORMALIZE A PORT INTO A NUMBER, STRING, OR FALSE.                                 │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    function normalizePort(val) {
      const port = parseInt(val, 10);
      if (isNaN(port)) {
        return val;
      }
      if (port >= 0) {
        return port;
      }
      return false;
    };

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ EVENT LISTENER FOR HTTP SERVER "ERROR" EVENT.                                     │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    function onError(error) {
      LOGGER_SERVER.error(error);
      if (error.syscall !== 'listen') {
        throw error;
      }
      const bind = typeof port === 'string'
      ? 'Pipe ' + port 
      : 'Port ' + port;
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    };

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ EVENT LISTENER FOR HTTP SERVER "LISTENING" EVENT.                                 │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    function onListening() {
      const addr = server.address();
      const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    };

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ EVENT LISTENER FOR HTTP SERVER "CLOSE" EVENT.                                     │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    function onClose() {
      console.log(`────────────────────────────────────────────────────`);
      console.log(`→ CLOSING SERVER ON PORT: ${bind}`);
    };

//  ┌───────────────────────────────────────────────────────────────────────────────────┐
//  │ EVENT LISTENER FOR NODE "SIGINT" EVENT.                                           │
//  └───────────────────────────────────────────────────────────────────────────────────┘
    process.on('SIGINT', () => {
      server.close();
    });